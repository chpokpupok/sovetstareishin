import logging
import difflib
import sqlite3
from datetime import datetime
import re
import telebot
from telebot import types
from dotenv import load_dotenv
import os

load_dotenv()
# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ–Ω—é
current_menu_message_id = None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        role TEXT DEFAULT 'user',
        agreement_accepted BOOLEAN DEFAULT FALSE,
        join_date TIMESTAMP
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS questions (
        question_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        question_text TEXT,
        is_approved BOOLEAN DEFAULT FALSE,
        is_answered BOOLEAN DEFAULT FALSE,
        timestamp TIMESTAMP,
        votes INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS answers (
        answer_id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_id INTEGER,
        user_id INTEGER,
        answer_text TEXT,
        timestamp TIMESTAMP,
        FOREIGN KEY (question_id) REFERENCES questions (question_id),
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS moderation_queue (
        question_id INTEGER PRIMARY KEY,
        FOREIGN KEY (question_id) REFERENCES questions (question_id)
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_votes (
        user_id INTEGER,
        question_id INTEGER,
        vote_type TEXT CHECK(vote_type IN ('up', 'neutral', 'down')),
        PRIMARY KEY (user_id, question_id),
        FOREIGN KEY (user_id) REFERENCES users (user_id),
        FOREIGN KEY (question_id) REFERENCES questions (question_id)
    )''')

    conn.commit()
    conn.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
def check_agreement(user_id):
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT agreement_accepted FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0]


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
def contains_bad_words(text: str) -> bool:
    try:
        with open("true_list.txt", encoding="UTF-8") as f:
            bad_words = [line.strip() for line in f.readlines() if line.strip()]

        pattern = re.compile(r'\b(' + '|'.join(map(re.escape, bad_words)) + r')\b', re.IGNORECASE)
        return bool(pattern.search(text))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {e}")
        return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
def is_duplicate_question(question_text: str) -> bool:
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT question_text FROM questions WHERE is_approved = TRUE')
    existing_questions = [row[0] for row in cursor.fetchall()]
    conn.close()

    for existing in existing_questions:
        similarity = difflib.SequenceMatcher(None, question_text.lower(), existing.lower()).ratio()
        if similarity > 0.8:
            return True
    return False


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_vote(user_id, question_id):
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT vote_type FROM user_votes WHERE user_id = ? AND question_id = ?', (user_id, question_id))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ
def notify_question_author(question_id, answer_text, answerer_name):
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    cursor.execute('SELECT user_id, question_text FROM questions WHERE question_id = ?', (question_id,))
    result = cursor.fetchone()

    if result:
        author_id, question_text = result

        notification_text = f"""
üì¢ –ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç!

‚ùì –í–æ–ø—Ä–æ—Å: {question_text}

üí¨ –û—Ç–≤–µ—Ç –æ—Ç {answerer_name}: {answer_text}
        """

        try:
            bot.send_message(author_id, notification_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –≤–æ–ø—Ä–æ—Å–∞: {e}")

    conn.close()


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é
def delete_previous_menu(chat_id, message_id):
    try:
        if message_id:
            bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user.id,))
    if not cursor.fetchone():
        cursor.execute('''
        INSERT INTO users (user_id, username, first_name, last_name, role, join_date)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name, 'user', datetime.now()))
        conn.commit()
    conn.close()

    if check_agreement(user.id):
        show_main_menu(message)
    else:
        show_agreement(message)


def show_agreement(message):
    agreement_text = """
    *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*

    1. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
    2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É.
    3. –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é.
    4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ù–∞–∂–∏–º–∞—è "–ü—Ä–∏–Ω–∏–º–∞—é", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.
    """

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–∏–Ω–∏–º–∞—é", callback_data='accept_agreement'))
    keyboard.add(types.InlineKeyboardButton("–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data='decline_agreement'))

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(message, 'message_id'):
        delete_previous_menu(message.chat.id, message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_msg = bot.send_message(
        chat_id=message.chat.id,
        text=agreement_text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
    global current_menu_message_id
    current_menu_message_id = sent_msg.message_id


@bot.callback_query_handler(func=lambda call: call.data == 'accept_agreement')
def accept_agreement(call):
    user_id = call.from_user.id

    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET agreement_accepted = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    show_main_menu(call.message, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'decline_agreement')
def decline_agreement(call):
    bot.answer_callback_query(call.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.")
    bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.")


def show_main_menu(message, message_id=None):
    menu_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question'))
    keyboard.add(types.InlineKeyboardButton("–¢–æ–ø –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data='top_questions'))
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data='view_questions'))
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data='show_rules'))

    if message_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=menu_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = bot.send_message(
                chat_id=message.chat.id,
                text=menu_text,
                reply_markup=keyboard
            )
            global current_menu_message_id
            current_menu_message_id = sent_msg.message_id
    else:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(message, 'message_id'):
            delete_previous_menu(message.chat.id, message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_msg = bot.send_message(
            chat_id=message.chat.id,
            text=menu_text,
            reply_markup=keyboard
        )

        current_menu_message_id = sent_msg.message_id


@bot.callback_query_handler(func=lambda call: call.data == 'ask_question')
def ask_question(call):
    bot.answer_callback_query(call.id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    delete_previous_menu(call.message.chat.id, call.message.message_id)

    msg = bot.send_message(
        chat_id=call.message.chat.id,
        text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
    )
    bot.register_next_step_handler(msg, process_question, call.message.chat.id)


def process_question(message, chat_id):
    question_text = message.text.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
    if not question_text:
        bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        msg = bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(msg, process_question, chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if contains_bad_words(question_text):
        bot.send_message(
            chat_id=chat_id,
            text="–í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ."
        )
        msg = bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(msg, process_question, chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if is_duplicate_question(question_text):
        bot.send_message(
            chat_id=chat_id,
            text="–¢–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–¥–∞–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ."
        )
        show_main_menu(message)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø–æ–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω)
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''
    INSERT INTO questions (user_id, question_text, timestamp)
    VALUES (?, ?, ?)
    ''', (user_id, question_text, datetime.now()))

    question_id = cursor.lastrowid
    cursor.execute('INSERT INTO moderation_queue (question_id) VALUES (?)', (question_id,))

    conn.commit()
    conn.close()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(chat_id, message.message_id)
        # –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å
        bot.delete_message(chat_id, message.message_id - 1)
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(
        chat_id=chat_id,
        text="‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    notify_moderators(question_id, question_text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message)


def notify_moderators(question_id: int, question_text: str):
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''SELECT user_id FROM users WHERE role = 'moder' ''')
    moderators = cursor.fetchall()
    conn.close()

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{question_id}'),
        types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{question_id}')
    )

    for moderator in moderators:
        user_id = moderator[0]
        try:
            bot.send_message(
                chat_id=user_id,
                text=f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (ID: {question_id}):\n\n{question_text}",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {user_id}: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_')))
def handle_moderation(call):
    action, question_id = call.data.split('_')
    question_id = int(question_id)

    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        cursor.execute('SELECT user_id, question_text FROM questions WHERE question_id = ?', (question_id,))
        result = cursor.fetchone()

        if not result:
            bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_id, question_text = result

        if action == 'approve':
            # –û–¥–æ–±—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å
            cursor.execute('UPDATE questions SET is_approved = TRUE WHERE question_id = ?', (question_id,))
            cursor.execute('DELETE FROM moderation_queue WHERE question_id = ?', (question_id,))

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:\n\n{question_text}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚úÖ –í–æ–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω:\n\n{question_text}"
            )

        else:  # reject
            # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            cursor.execute('DELETE FROM questions WHERE question_id = ?', (question_id,))
            cursor.execute('DELETE FROM moderation_queue WHERE question_id = ?', (question_id,))
            cursor.execute('DELETE FROM user_votes WHERE question_id = ?', (question_id,))

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:\n\n{question_text}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω:\n\n{question_text}"
            )

        conn.commit()
        bot.answer_callback_query(call.id, "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è")
        conn.rollback()
    finally:
        conn.close()


@bot.callback_query_handler(func=lambda call: call.data == 'top_questions')
def show_top_questions(call):
    bot.answer_callback_query(call.id)

    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    try:
        cursor.execute('''
        SELECT question_id, question_text, votes 
        FROM questions 
        WHERE is_approved = TRUE
        ORDER BY votes DESC 
        LIMIT 10
        ''')

        top_questions = cursor.fetchall()

        if not top_questions:
            text = "‚≠ê –ü–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º."
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text
            )
        else:
            keyboard = types.InlineKeyboardMarkup()

            for q_id, q_text, votes in top_questions:
                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                button_text = f"{q_text[:30]}..." if len(q_text) > 30 else q_text
                keyboard.add(types.InlineKeyboardButton(
                    f"{button_text} (üëç {votes})",
                    callback_data=f'view_question_{q_id}'
                ))

            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main'))

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üèÜ –¢–æ–ø-10 –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=keyboard
            )

    except sqlite3.Error as e:
        logger.error(f"Database error in top questions: {e}")
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    finally:
        conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith('view_question_'))
def view_question(call):
    question_id = int(call.data.split('_')[2])
    user_id = call.from_user.id

    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        cursor.execute('''
        SELECT question_text, votes, is_answered 
        FROM questions 
        WHERE question_id = ? AND is_approved = TRUE
        ''', (question_id,))
        question = cursor.fetchone()

        if not question:
            bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω")
            return

        question_text, votes, is_answered = question
        text = f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question_text}\n\nüëç –†–µ–π—Ç–∏–Ω–≥: {votes}\n"

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å
        cursor.execute('''
        SELECT a.answer_text, u.first_name, u.role 
        FROM answers a
        JOIN users u ON a.user_id = u.user_id
        WHERE a.question_id = ?
        ORDER BY a.timestamp
        ''', (question_id,))
        answers = cursor.fetchall()

        if answers:
            text += "\nüìù –û—Ç–≤–µ—Ç—ã:\n"
            for idx, (answer_text, first_name, role) in enumerate(answers, 1):
                text += f"\n{idx}. {answer_text}\n   ‚Äî {first_name} ({role})\n"
        elif is_answered:
            text += "\n‚Ñπ –ù–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ –æ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π."
        else:
            text += "\n‚Ñπ –ù–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤."

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(row_width=3)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_vote = get_user_vote(user_id, question_id)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        up_button = types.InlineKeyboardButton(
            "‚úÖ üëç" if current_vote == 'up' else "üëç",
            callback_data=f'vote_up_{question_id}'
        )
        neutral_button = types.InlineKeyboardButton(
            "‚úÖ ‚ûñ" if current_vote == 'neutral' else "‚ûñ",
            callback_data=f'vote_neutral_{question_id}'
        )
        down_button = types.InlineKeyboardButton(
            "‚úÖ üëé" if current_vote == 'down' else "üëé",
            callback_data=f'vote_down_{question_id}'
        )

        keyboard.add(up_button, neutral_button, down_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
        cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        user_role = result[0] if result else 'user'

        if user_role in ['ekspert', 'moder']:
            keyboard.add(types.InlineKeyboardButton("‚úè –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'answer_{question_id}'))

        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data='view_questions'))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error viewing question: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
    finally:
        conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith(('vote_up_', 'vote_neutral_', 'vote_down_')))
def handle_vote(call):
    conn = None
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        if call.data.startswith('vote_up_'):
            new_vote_type = 'up'
            question_id = int(call.data.replace('vote_up_', ''))
        elif call.data.startswith('vote_neutral_'):
            new_vote_type = 'neutral'
            question_id = int(call.data.replace('vote_neutral_', ''))
        elif call.data.startswith('vote_down_'):
            new_vote_type = 'down'
            question_id = int(call.data.replace('vote_down_', ''))
        else:
            logger.error(f"Invalid vote callback: {call.data}")
            return

        user_id = call.from_user.id

        conn = sqlite3.connect('elders_council.db', check_same_thread=False)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT vote_type FROM user_votes WHERE user_id=? AND question_id=?',
                       (user_id, question_id))
        existing_vote = cursor.fetchone()

        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ neutral
        if existing_vote and existing_vote[0] == new_vote_type:
            new_vote_type = 'neutral'

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥–æ–ª–æ—Å
        cursor.execute('DELETE FROM user_votes WHERE user_id=? AND question_id=?',
                       (user_id, question_id))

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ neutral, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        if new_vote_type != 'neutral':
            cursor.execute('INSERT INTO user_votes (user_id, question_id, vote_type) VALUES (?,?,?)',
                           (user_id, question_id, new_vote_type))

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞
        cursor.execute('''
            SELECT 
                SUM(CASE WHEN vote_type = 'up' THEN 1 ELSE 0 END) -
                SUM(CASE WHEN vote_type = 'down' THEN 1 ELSE 0 END) as net_votes
            FROM user_votes 
            WHERE question_id=?
        ''', (question_id,))

        result = cursor.fetchone()
        new_votes = result[0] if result[0] is not None else 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞
        cursor.execute('UPDATE questions SET votes=? WHERE question_id=?',
                       (new_votes, question_id))

        conn.commit()
        bot.answer_callback_query(call.id, "–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        view_question(call)

    except Exception as e:
        logger.error(f"Vote error: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (answer_question, process_answer, view_questions, handle_questions_pagination,
# back_to_main, show_rules, msg_upgrd, check_pass) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def answer_question(call):
    question_id = int(call.data.split('_')[1])
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    user_role = result[0] if result else 'user'
    conn.close()

    if user_role not in ['ekspert', 'moder']:
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä—Ç—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    delete_previous_menu(call.message.chat.id, call.message.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        chat_id=call.message.chat.id,
        text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:"
    )
    bot.register_next_step_handler(msg, process_answer, question_id, call.from_user.first_name, call.message.chat.id)


def process_answer(message, question_id, answerer_name, chat_id):
    answer_text = message.text.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    if not answer_text:
        bot.send_message(chat_id, "–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        msg = bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(msg, process_answer, question_id, answerer_name, chat_id)
        return

    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
        INSERT INTO answers (question_id, user_id, answer_text, timestamp)
        VALUES (?, ?, ?, ?)
        ''', (question_id, user_id, answer_text, datetime.now()))

        # –ü–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
        cursor.execute('''
        UPDATE questions 
        SET is_answered = TRUE 
        WHERE question_id = ?
        ''', (question_id,))

        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute('SELECT question_text FROM questions WHERE question_id = ?', (question_id,))
        question_result = cursor.fetchone()
        question_text = question_result[0] if question_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –≤–æ–ø—Ä–æ—Å–∞
        notify_question_author(question_id, answer_text, answerer_name)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.delete_message(chat_id, message.message_id)
            bot.delete_message(chat_id, message.message_id - 1)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        bot.send_message(chat_id, "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        show_main_menu(message)

    except Exception as e:
        logger.error(f"Error saving answer: {e}")
        bot.send_message(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
    finally:
        conn.close()


@bot.callback_query_handler(func=lambda call: call.data == 'view_questions')
def view_questions(call, page=1):
    QUESTIONS_PER_PAGE = 5
    bot.answer_callback_query(call.id)

    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        cursor.execute('SELECT COUNT(*) FROM questions WHERE is_approved = TRUE')
        total_questions = cursor.fetchone()[0]
        total_pages = max(1, (total_questions + QUESTIONS_PER_PAGE - 1) // QUESTIONS_PER_PAGE)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if call.data.startswith('view_questions_page_'):
            try:
                page = int(call.data.split('_')[-1])
            except Exception:
                page = 1

        offset = (page - 1) * QUESTIONS_PER_PAGE

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cursor.execute('''
        SELECT question_id, question_text, votes, is_answered 
        FROM questions 
        WHERE is_approved = TRUE
        ORDER BY timestamp DESC
        LIMIT ? OFFSET ?
        ''', (QUESTIONS_PER_PAGE, offset))
        questions = cursor.fetchall()

        keyboard = types.InlineKeyboardMarkup()

        if questions:
            for q_id, q_text, votes, is_answered in questions:
                status = "‚úÖ" if is_answered else "‚ùì"
                button_text = f"{q_text[:30]}..." if len(q_text) > 30 else q_text
                keyboard.add(types.InlineKeyboardButton(
                    f"{status} {button_text} (üëç {votes})",
                    callback_data=f'view_question_{q_id}'
                ))
        else:
            keyboard.add(types.InlineKeyboardButton(
                "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤",
                callback_data='no_questions'
            ))

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(types.InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'view_questions_page_{page - 1}'
            ))
        if page < total_pages:
            pagination_buttons.append(types.InlineKeyboardButton(
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f'view_questions_page_{page + 1}'
            ))
        if pagination_buttons:
            keyboard.row(*pagination_buttons)

        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main'))

        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}" if questions else "‚Ñπ –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error viewing questions: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤")
    finally:
        conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith('view_questions_page_'))
def handle_questions_pagination(call):
    try:
        page = int(call.data.split('_')[-1])
    except Exception:
        page = 1
    view_questions(call, page)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_main')
def back_to_main(call):
    show_main_menu(call.message, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'show_rules')
def show_rules(call):
    bot.answer_callback_query(call.id)

    rules_text = """
    –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç-–±–æ—Ç–∞
–¶–µ–ª—å—é —á–∞—Ç-–±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –º–µ–∂–¥—É –≤–µ—Ç–µ—Ä–∞–Ω–∞–º–∏ –£–ì–ù–¢–£ –∏ –º–æ–ª–æ–¥–µ–∂—å—é.
–¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç ¬´–°–æ–≤–µ—Ç —Å—Ç–∞—Ä–µ–π—à–∏–Ω¬ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏, –º–æ–ª–æ–¥—ã–º–∏
–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ ¬´–°–µ–º—å—è –£–ì–ù–¢–£¬ª.
–û–±—Å—É–∂–¥–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–µ –∫–∞—Å–∞—é—Ç—Å—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –£–ì–ù–¢–£: —É—á–µ–±–Ω–∞—è, –Ω–∞—É—á–Ω–∞—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è.
–†–∞–±–æ—Ç–∞ —á–∞—Ç-–±–æ—Ç–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.
    """

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main'))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=rules_text,
        reply_markup=keyboard
    )


@bot.message_handler(commands=['upgrade_rights'])
def msg_upgrd(message):
    bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    bot.register_next_step_handler(message, check_pass)


def check_pass(message):
    password = message.text.strip()
    user_id = message.from_user.id

    conn = sqlite3.connect('elders_council.db', check_same_thread=False)
    cursor = conn.cursor()

    if password == '123123':
        cursor.execute('UPDATE users SET role = ? WHERE user_id = ?', ('moder', user_id))
        conn.commit()
        bot.send_message(message.chat.id, text='–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!')
    elif password == '321321':
        cursor.execute('UPDATE users SET role = ? WHERE user_id = ?', ('ekspert', user_id))
        conn.commit()
        bot.send_message(message.chat.id, text='–¢–µ–ø–µ—Ä—å –≤—ã —ç–∫—Å–ø–µ—Ä—Ç!')
    else:
        bot.send_message(message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!')

    conn.close()


if __name__ == '__main__':
    init_db()
    bot.polling(none_stop=True)